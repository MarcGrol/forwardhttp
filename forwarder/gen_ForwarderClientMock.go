// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package forwarder is a generated GoMock package.
package forwarder

import (
	context "context"
	httpclient "github.com/MarcGrol/forwardhttp/httpclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockForwarder is a mock of Forwarder interface
type MockForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockForwarderMockRecorder
}

// MockForwarderMockRecorder is the mock recorder for MockForwarder
type MockForwarderMockRecorder struct {
	mock *MockForwarder
}

// NewMockForwarder creates a new mock instance
func NewMockForwarder(ctrl *gomock.Controller) *MockForwarder {
	mock := &MockForwarder{ctrl: ctrl}
	mock.recorder = &MockForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForwarder) EXPECT() *MockForwarderMockRecorder {
	return m.recorder
}

// Forward mocks base method
func (m *MockForwarder) Forward(c context.Context, req httpclient.Request) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", c, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Forward indicates an expected call of Forward
func (mr *MockForwarderMockRecorder) Forward(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockForwarder)(nil).Forward), c, req)
}

// ForwardAsync mocks base method
func (m *MockForwarder) ForwardAsync(c context.Context, req httpclient.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardAsync", c, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardAsync indicates an expected call of ForwardAsync
func (mr *MockForwarderMockRecorder) ForwardAsync(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardAsync", reflect.TypeOf((*MockForwarder)(nil).ForwardAsync), c, req)
}
